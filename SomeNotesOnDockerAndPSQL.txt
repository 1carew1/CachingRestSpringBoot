docker create -v /var/lib/postgresql/data --name spring_app_data postgres:10.0
docker run --name postgresdb -p 5432:5432 --volumes-from spring_app_data -e  POSTGRES_PASSWORD=password   -d postgres:10.0


docker exec -it postgresdb su postgres -c 'psql'
\password postgres
CREATE ROLE dbuser WITH LOGIN PASSWORD 'password' ;
ALTER ROLE dbuser CREATEDB;
CREATE database cachetest;


# Go to db
docker exec -it postgresdb su postgres -c 'psql'
\password postgres
\c cachetest;
\dt
select * from cache_performance;

# Get the time difference in ms
select id, cache_hit, image_hash,
    (extract(epoch from finish_date) - extract(epoch from start_date))*1000 as timeDiffms, start_date, finish_date
    from cache_performance;

docker run --name spring_app_container \
--link postgresdb:postgresdb \
-p 8080:8080 \
-t cachingrest:0.0.1-SNAPSHOT


psql -h localhost -p 5432 -U dbuser --password


s

docker run --name  rediscontainer -p 6379:6379 -d redis:4.0.2




docker start rediscontainer
docker start postgresdb



# Web Ui for Docker Swarm

docker service create \
--name portainer \
--publish 9000:9000 \
--constraint 'node.role == manager' \
--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
portainer/portainer \
-H unix:///var/run/docker.sock


# Docker Swarm Redis

docker service create \
  --replicas 1 \
  --publish 6379:6379 \
  --name redisswarm \
  --update-delay 10s \
  --mount type=bind,src=/home/pi/CachingRestSpringBoot/redis/redis.conf,target=/usr/local/etc/redis/redis.conf \
  redis:4.0.2 redis-server /usr/local/etc/redis/redis.conf

# Old Fashioned way to run redis container

 docker run -v /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf --name myredis redis:4.0.2 redis-server /usr/local/etc/redis/redis.conf



 # Get into redis :
 docker exec -it redisswarm.1.htx21srlljjyq0rsb57rvfem0 'sh'
 redis-cli INFO | grep memory